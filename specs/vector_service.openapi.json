{
    "openapi": "3.0.0",
    "info": {
        "title": "Pinecone API",
        "version": "version not set",
        "contact": {
            "name": "Pinecone.io Ops",
            "url": "https://pinecone.io",
            "email": "support@pinecone.io"
        }
    },
    "tags": [
        {
            "name": "Vector Operations"
        }
    ],
    "paths": {
        "/describe_index_stats": {
            "get": {
                "summary": "DescribeIndexStats",
                "description": "The `DescribeIndexStats` operation returns statistics about the index's contents.\nFor example: The vector count per namespace and the number of dimensions.",
                "operationId": "describe_index_stats",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeIndexStatsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Vector Operations"
                ]
            }
        },
        "/query": {
            "post": {
                "summary": "Query",
                "description": "The `Query` operation searches a namespace, using one or more query vectors.\nIt retrieves the ids of the most similar items in a namespace, along with their similarity scores.",
                "operationId": "query",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Vector Operations"
                ]
            }
        },
        "/vectors/delete": {
            "delete": {
                "summary": "Delete",
                "description": "The `Delete` operation deletes vectors, by id, from a single namespace.\nYou can delete items by their id, from a single namespace.",
                "operationId": "delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ids",
                        "description": "Vectors to delete.",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "deleteAll",
                        "description": "This indicates that all vectors in the index namespace should be deleted.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": "false"
                        }
                    },
                    {
                        "name": "namespace",
                        "description": "The namespace to delete vectors from, if applicable.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Vector Operations"
                ]
            },
            "post": {
                "summary": "Delete",
                "description": "The `Delete` operation deletes vectors, by id, from a single namespace.\nYou can delete items by their id, from a single namespace.",
                "operationId": "delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Vector Operations"
                ]
            }
        },
        "/vectors/fetch": {
            "get": {
                "summary": "Fetch",
                "description": "The `Fetch` operation looks up and returns vectors, by id, from a single namespace.\nThe returned vectors include the vector data and/or metadata.",
                "operationId": "fetch",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ids",
                        "description": "The vector ids to fetch.",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "namespace",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Vector Operations"
                ]
            }
        },
        "/vectors/update": {
            "post": {
                "summary": "Update",
                "description": "The `Update` operation updates vector in a namespace.\nIf a value is included, it will overwrite the previous value.\nIf a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.",
                "operationId": "update",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Vector Operations"
                ]
            }
        },
        "/vectors/upsert": {
            "post": {
                "summary": "Upsert",
                "description": "The `Upsert` operation writes vectors into a namespace.\nIf a new value is upserted for an existing vector id, it will overwrite the previous value.",
                "operationId": "upsert",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpsertResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Vector Operations"
                ]
            }
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ],
    "externalDocs": {
        "description": "More Pinecone.io API docs",
        "url": "https://www.pinecone.io/docs"
    },
    "servers": [
        {
            "url": "https://{index_name}-{project_name}.svc.{environment}.pinecone.io",
            "variables": {
                "index_name": {
                    "default": "unknown"
                },
                "project_name": {
                    "default": "unknown"
                },
                "environment": {
                    "default": "unknown"
                }
            }
        }
    ],
    "components": {
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "description": "An API Key is required to call Pinecone APIs. Get yours at https://www.pinecone.io/start/",
                "name": "Api-Key",
                "in": "header"
            }
        },
        "schemas": {
            "DeleteRequest": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "example": [
                            "id-0",
                            "id-1"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "description": "Vectors to delete.",
                        "maxLength": 1000,
                        "minLength": 1
                    },
                    "deleteAll": {
                        "type": "boolean",
                        "example": false,
                        "default": "false",
                        "description": "This indicates that all vectors in the index namespace should be deleted."
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "The namespace to delete vectors from, if applicable."
                    },
                    "filter": {
                        "type": "object",
                        "description": "If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive\nwith specifying ids to delete in the ids param or using delete_all=True.\nSee https://www.pinecone.io/docs/metadata-filtering/`."
                    }
                },
                "description": "The request for the `Delete` operation."
            },
            "DeleteResponse": {
                "type": "object",
                "description": "The response for the `Delete` operation."
            },
            "DescribeIndexStatsResponse": {
                "type": "object",
                "example": {
                    "namespaces": {
                        "": {
                            "vectorCount": 50000
                        },
                        "example-namespace-2": {
                            "vectorCount": 30000
                        }
                    },
                    "dimension": 1024,
                    "index_fullness": 0.42
                },
                "properties": {
                    "namespaces": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NamespaceSummary"
                        },
                        "description": "A mapping for each namespace in the index from namespace name to a summary of its contents."
                    },
                    "dimension": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1024,
                        "description": "The dimension of the indexed vectors."
                    },
                    "indexFullness": {
                        "type": "number",
                        "format": "float",
                        "example": 0.42,
                        "description": "The fullness of the index."
                    }
                },
                "description": "The response for the `DescribeIndexStats` operation."
            },
            "FetchResponse": {
                "type": "object",
                "properties": {
                    "vectors": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Vector"
                        },
                        "title": "The fetched vectors, in the form of a map between the fetched ids and the fetched vectors"
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "The namespace of the vectors."
                    }
                },
                "description": "The response for the `Fetch` operation."
            },
            "NamespaceSummary": {
                "type": "object",
                "properties": {
                    "vectorCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50000,
                        "description": "The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the\nunderlying index and corresponding query results, etc."
                    }
                },
                "description": "A summary of the contents of a namespace."
            },
            "QueryRequest": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "The namespace to query."
                    },
                    "topK": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10,
                        "description": "The number of results to return for each query.",
                        "maximum": 10000,
                        "minimum": 1,
                        "required": [
                            "top_k"
                        ]
                    },
                    "filter": {
                        "type": "object",
                        "example": {
                            "genre": {
                                "$in": [
                                    "comedy",
                                    "documentary",
                                    "drama"
                                ]
                            },
                            "year": {
                                "$eq": 2019
                            }
                        },
                        "description": "The filter to apply if no filter is specified in `QueryVector. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/."
                    },
                    "includeValues": {
                        "type": "boolean",
                        "example": true,
                        "default": "false",
                        "description": "Indicates whether vector values are included in the response."
                    },
                    "includeMetadata": {
                        "type": "boolean",
                        "example": true,
                        "default": "false",
                        "description": "Indicates whether metadata is included in the response as well as the ids."
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QueryVector"
                        },
                        "description": "The query vectors.",
                        "maxLength": 10,
                        "minLength": 1,
                        "required": [
                            "queries"
                        ]
                    }
                },
                "description": "The request for the `Query` operation.",
                "required": [
                    "topK",
                    "queries"
                ]
            },
            "QueryResponse": {
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SingleQueryResults"
                        },
                        "description": "The results of each query. The order is the same as `QueryRequest.queries`."
                    }
                },
                "description": "The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar."
            },
            "QueryVector": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "example": [
                            0.1,
                            0.2,
                            0.3,
                            0.4,
                            0.5,
                            0.6,
                            0.7,
                            0.8
                        ],
                        "items": {
                            "type": "number",
                            "format": "float"
                        },
                        "description": "The query vector values. This should be the same length as the dimension of the index being queried.",
                        "maxLength": 20000,
                        "minLength": 1,
                        "required": [
                            "values"
                        ]
                    },
                    "topK": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10,
                        "description": "An override for the number of results to return for this query vector.",
                        "maximum": 10000,
                        "minimum": 1
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "An override the namespace to search."
                    },
                    "filter": {
                        "type": "object",
                        "example": {
                            "genre": {
                                "$in": [
                                    "comedy",
                                    "documentary",
                                    "drama"
                                ]
                            },
                            "year": {
                                "$eq": 2019
                            }
                        },
                        "description": "An override for the metadata filter to apply. This replaces the request-level filter."
                    }
                },
                "description": "A single query vector within a `QueryRequest`.",
                "required": [
                    "values"
                ]
            },
            "ScoredVector": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "example-vector-1",
                        "description": "This is the vector's unique id.",
                        "maxLength": 512,
                        "minLength": 1,
                        "required": [
                            "id"
                        ]
                    },
                    "score": {
                        "type": "number",
                        "format": "float",
                        "example": 0.08,
                        "description": "This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar."
                    },
                    "values": {
                        "type": "array",
                        "example": [
                            0.1,
                            0.2,
                            0.3,
                            0.4,
                            0.5,
                            0.6,
                            0.7,
                            0.8
                        ],
                        "items": {
                            "type": "number",
                            "format": "float"
                        },
                        "description": "This is the vector data, if it is requested."
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "genre": "documentary",
                            "year": 2019
                        },
                        "description": "This is the metadata, if it is requested."
                    }
                },
                "required": [
                    "id"
                ]
            },
            "SingleQueryResults": {
                "type": "object",
                "properties": {
                    "matches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScoredVector"
                        },
                        "description": "The matches for the vectors."
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "The namespace for the vectors."
                    }
                },
                "title": "The query results for a single `QueryVector`"
            },
            "UpdateRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "example-vector-1",
                        "description": "Vector's unique id.",
                        "maxLength": 512,
                        "minLength": 1,
                        "required": [
                            "id"
                        ]
                    },
                    "values": {
                        "type": "array",
                        "example": [
                            0.1,
                            0.2,
                            0.3,
                            0.4,
                            0.5,
                            0.6,
                            0.7,
                            0.8
                        ],
                        "items": {
                            "type": "number",
                            "format": "float"
                        },
                        "description": "Vector data.",
                        "maxLength": 20000,
                        "minLength": 1
                    },
                    "setMetadata": {
                        "type": "object",
                        "example": {
                            "genre": "documentary",
                            "year": 2019
                        },
                        "description": "Metadata to *set* for the vector."
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "Namespace name where to update the vector."
                    }
                },
                "description": "The request for the `Upsert` operation.",
                "required": [
                    "id"
                ]
            },
            "UpdateResponse": {
                "type": "object",
                "description": "The response for the `Update` operation."
            },
            "UpsertRequest": {
                "type": "object",
                "properties": {
                    "vectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Vector"
                        },
                        "description": "This is the actual array data.",
                        "maxLength": 1000,
                        "minLength": 1,
                        "required": [
                            "vectors"
                        ]
                    },
                    "namespace": {
                        "type": "string",
                        "example": "example-namespace",
                        "description": "This is the namespace name where you upsert vectors."
                    }
                },
                "description": "The request for the `Upsert` operation.",
                "required": [
                    "vectors"
                ]
            },
            "UpsertResponse": {
                "type": "object",
                "properties": {
                    "upsertedCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10,
                        "description": "The number of vectors upserted."
                    }
                },
                "description": "The response for the `Upsert` operation."
            },
            "Vector": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "example-vector-1",
                        "description": "This is the vector's unique id.",
                        "maxLength": 512,
                        "minLength": 1,
                        "required": [
                            "id"
                        ]
                    },
                    "values": {
                        "type": "array",
                        "example": [
                            0.1,
                            0.2,
                            0.3,
                            0.4,
                            0.5,
                            0.6,
                            0.7,
                            0.8
                        ],
                        "items": {
                            "type": "number",
                            "format": "float"
                        },
                        "description": "This is the vector data included in the request.",
                        "maxLength": 20000,
                        "minLength": 1,
                        "required": [
                            "values"
                        ]
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "genre": "documentary",
                            "year": 2019
                        },
                        "description": "This is the metadata included in the request."
                    }
                },
                "required": [
                    "id",
                    "values"
                ]
            },
            "protobufAny": {
                "type": "object",
                "properties": {
                    "typeUrl": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            },
            "protobufNullValue": {
                "type": "string",
                "enum": [
                    "NULL_VALUE"
                ],
                "default": "NULL_VALUE",
                "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
            },
            "rpcStatus": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/protobufAny"
                        }
                    }
                }
            }
        }
    }
}