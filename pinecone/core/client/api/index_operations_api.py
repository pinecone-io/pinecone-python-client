# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import List, Optional

from pinecone.core.client.models.collection_meta import CollectionMeta
from pinecone.core.client.models.create_collection_request import CreateCollectionRequest
from pinecone.core.client.models.create_request import CreateRequest
from pinecone.core.client.models.index_meta import IndexMeta
from pinecone.core.client.models.list_indexes200_response import ListIndexes200Response
from pinecone.core.client.models.patch_request import PatchRequest

from pinecone.core.client.api_client import ApiClient
from pinecone.core.client.api_response import ApiResponse
from pinecone.core.client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class IndexOperationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def configure_index(
        self,
        index_name: Annotated[StrictStr, Field(..., description="The name of the index")],
        patch_request: Annotated[
            Optional[PatchRequest], Field(description="The desired pod type and replica configuration for the index.")
        ] = None,
        **kwargs,
    ) -> IndexMeta:  # noqa: E501
        """configure_index  # noqa: E501

        This operation specifies the pod type and number of replicas for an index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_index(index_name, patch_request, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param patch_request: The desired pod type and replica configuration for the index.
        :type patch_request: PatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IndexMeta
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the configure_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_index_with_http_info(index_name, patch_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_index_with_http_info(
        self,
        index_name: Annotated[StrictStr, Field(..., description="The name of the index")],
        patch_request: Annotated[
            Optional[PatchRequest], Field(description="The desired pod type and replica configuration for the index.")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """configure_index  # noqa: E501

        This operation specifies the pod type and number of replicas for an index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_index_with_http_info(index_name, patch_request, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param patch_request: The desired pod type and replica configuration for the index.
        :type patch_request: PatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IndexMeta, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["index_name", "patch_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method configure_index" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["index_name"]:
            _path_params["indexName"] = _params["index_name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["patch_request"] is not None:
            _body_params = _params["patch_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "202": "IndexMeta",
            "400": None,
            "404": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/databases/{indexName}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_collection(
        self, create_collection_request: Optional[CreateCollectionRequest] = None, **kwargs
    ) -> str:  # noqa: E501
        """create_collection  # noqa: E501

        This operation creates a Pinecone collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection(create_collection_request, async_req=True)
        >>> result = thread.get()

        :param create_collection_request:
        :type create_collection_request: CreateCollectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_collection_with_http_info(create_collection_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_collection_with_http_info(
        self, create_collection_request: Optional[CreateCollectionRequest] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """create_collection  # noqa: E501

        This operation creates a Pinecone collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection_with_http_info(create_collection_request, async_req=True)
        >>> result = thread.get()

        :param create_collection_request:
        :type create_collection_request: CreateCollectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["create_collection_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_collection" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_collection_request"] is not None:
            _body_params = _params["create_collection_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "201": "str",
            "400": None,
            "409": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/collections",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_index(self, create_request: Optional[CreateRequest] = None, **kwargs) -> IndexMeta:  # noqa: E501
        """create_index  # noqa: E501

        This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of shards and replicas to use, and more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_index(create_request, async_req=True)
        >>> result = thread.get()

        :param create_request:
        :type create_request: CreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IndexMeta
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_index_with_http_info(create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_index_with_http_info(
        self, create_request: Optional[CreateRequest] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """create_index  # noqa: E501

        This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of shards and replicas to use, and more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_index_with_http_info(create_request, async_req=True)
        >>> result = thread.get()

        :param create_request:
        :type create_request: CreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IndexMeta, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["create_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_index" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_request"] is not None:
            _body_params = _params["create_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "201": "IndexMeta",
            "400": None,
            "409": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/databases",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_collection(
        self, collection_name: Annotated[StrictStr, Field(..., description="The name of the collection")], **kwargs
    ) -> str:  # noqa: E501
        """delete_collection  # noqa: E501

        This operation deletes an existing collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: The name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_collection_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_collection_with_http_info(
        self, collection_name: Annotated[StrictStr, Field(..., description="The name of the collection")], **kwargs
    ) -> ApiResponse:  # noqa: E501
        """delete_collection  # noqa: E501

        This operation deletes an existing collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: The name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["collection_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_collection" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["collection_name"]:
            _path_params["collectionName"] = _params["collection_name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "202": "str",
            "404": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/collections/{collectionName}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_index(
        self, index_name: Annotated[StrictStr, Field(..., description="The name of the index")], **kwargs
    ) -> str:  # noqa: E501
        """delete_index  # noqa: E501

        This operation deletes an existing index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_index(index_name, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_index_with_http_info(index_name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_index_with_http_info(
        self, index_name: Annotated[StrictStr, Field(..., description="The name of the index")], **kwargs
    ) -> ApiResponse:  # noqa: E501
        """delete_index  # noqa: E501

        This operation deletes an existing index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_index_with_http_info(index_name, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["index_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_index" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["index_name"]:
            _path_params["indexName"] = _params["index_name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "202": "str",
            "404": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/databases/{indexName}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def describe_collection(
        self, collection_name: Annotated[StrictStr, Field(..., description="The name of the collection")], **kwargs
    ) -> CollectionMeta:  # noqa: E501
        """describe_collection  # noqa: E501

        Get a description of a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.describe_collection(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: The name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CollectionMeta
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the describe_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.describe_collection_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def describe_collection_with_http_info(
        self, collection_name: Annotated[StrictStr, Field(..., description="The name of the collection")], **kwargs
    ) -> ApiResponse:  # noqa: E501
        """describe_collection  # noqa: E501

        Get a description of a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.describe_collection_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: The name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CollectionMeta, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["collection_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method describe_collection" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["collection_name"]:
            _path_params["collectionName"] = _params["collection_name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "CollectionMeta",
            "404": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/collections/{collectionName}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def describe_index(
        self, index_name: Annotated[StrictStr, Field(..., description="The name of the index")], **kwargs
    ) -> IndexMeta:  # noqa: E501
        """describe_index  # noqa: E501

        Get a description of an index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.describe_index(index_name, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IndexMeta
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the describe_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.describe_index_with_http_info(index_name, **kwargs)  # noqa: E501

    @validate_arguments
    def describe_index_with_http_info(
        self, index_name: Annotated[StrictStr, Field(..., description="The name of the index")], **kwargs
    ) -> ApiResponse:  # noqa: E501
        """describe_index  # noqa: E501

        Get a description of an index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.describe_index_with_http_info(index_name, async_req=True)
        >>> result = thread.get()

        :param index_name: The name of the index (required)
        :type index_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IndexMeta, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = ["index_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method describe_index" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["index_name"]:
            _path_params["indexName"] = _params["index_name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "IndexMeta",
            "404": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/databases/{indexName}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_collections(self, **kwargs) -> List[str]:  # noqa: E501
        """list_collections  # noqa: E501

        This operation returns a list of your Pinecone collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_collections(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_collections_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_collections_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_collections_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """list_collections  # noqa: E501

        This operation returns a list of your Pinecone collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method list_collections" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json; charset=utf-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/collections",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_indexes(self, **kwargs) -> ListIndexes200Response:  # noqa: E501
        """list_indexes  # noqa: E501

        This operation returns a list of your Pinecone indexes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_indexes(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListIndexes200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_indexes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_indexes_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_indexes_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """list_indexes  # noqa: E501

        This operation returns a list of your Pinecone indexes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_indexes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListIndexes200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _hosts = ["https://controller.{environment}.pinecone.io"]
        _host = _hosts[0]
        if kwargs.get("_host_index"):
            _host_index = int(kwargs.get("_host_index"))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError("Invalid host index. Must be 0 <= index < %s" % len(_host))
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method list_indexes" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json; charset=utf-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ListIndexes200Response",
        }

        return self.api_client.call_api(
            "/databases",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
