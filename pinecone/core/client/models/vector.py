# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist, constr
from pinecone.core.client.models.sparse_values import SparseValues


class Vector(BaseModel):
    """
    Vector
    """

    id: constr(strict=True, max_length=512, min_length=1) = Field(..., description="This is the vector's unique id.")
    values: conlist(Union[StrictFloat, StrictInt]) = Field(
        ..., description="This is the vector data included in the request."
    )
    sparse_values: Optional[SparseValues] = Field(None, alias="sparseValues")
    metadata: Optional[Dict[str, Any]] = Field(None, description="This is the metadata included in the request.")
    __properties = ["id", "values", "sparseValues", "metadata"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Vector:
        """Create an instance of Vector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sparse_values
        if self.sparse_values:
            _dict["sparseValues"] = self.sparse_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Vector:
        """Create an instance of Vector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Vector.parse_obj(obj)

        _obj = Vector.parse_obj(
            {
                "id": obj.get("id"),
                "values": obj.get("values"),
                "sparse_values": SparseValues.from_dict(obj.get("sparseValues"))
                if obj.get("sparseValues") is not None
                else None,
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
