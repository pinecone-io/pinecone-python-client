# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class DeleteRequest(BaseModel):
    """
    The request for the `Delete` operation.  # noqa: E501
    """

    ids: Optional[conlist(StrictStr)] = Field(None, description="Vectors to delete.")
    delete_all: Optional[StrictBool] = Field(
        False,
        alias="deleteAll",
        description="This indicates that all vectors in the index namespace should be deleted.",
    )
    namespace: Optional[StrictStr] = Field(None, description="The namespace to delete vectors from, if applicable.")
    filter: Optional[Dict[str, Any]] = Field(
        None,
        description="If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive with specifying ids to delete in the ids param or using delete_all=True. See https://www.pinecone.io/docs/metadata-filtering/.",
    )
    __properties = ["ids", "deleteAll", "namespace", "filter"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeleteRequest:
        """Create an instance of DeleteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeleteRequest:
        """Create an instance of DeleteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeleteRequest.parse_obj(obj)

        _obj = DeleteRequest.parse_obj(
            {
                "ids": obj.get("ids"),
                "delete_all": obj.get("deleteAll") if obj.get("deleteAll") is not None else False,
                "namespace": obj.get("namespace"),
                "filter": obj.get("filter"),
            }
        )
        return _obj
