# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt


class HnswConfig(BaseModel):
    """
    HnswConfig
    """

    ef_construction: Optional[StrictInt] = 500
    ef: Optional[StrictInt] = 250
    m: Optional[StrictInt] = Field(12, alias="M")
    max_elements: Optional[StrictInt] = 50000000
    __properties = ["ef_construction", "ef", "M", "max_elements"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HnswConfig:
        """Create an instance of HnswConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HnswConfig:
        """Create an instance of HnswConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HnswConfig.parse_obj(obj)

        _obj = HnswConfig.parse_obj(
            {
                "ef_construction": obj.get("ef_construction") if obj.get("ef_construction") is not None else 500,
                "ef": obj.get("ef") if obj.get("ef") is not None else 250,
                "m": obj.get("M") if obj.get("M") is not None else 12,
                "max_elements": obj.get("max_elements") if obj.get("max_elements") is not None else 50000000,
            }
        )
        return _obj
