# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field
from pinecone.core.client.models.index_meta_database import IndexMetaDatabase
from pinecone.core.client.models.index_meta_status import IndexMetaStatus


class IndexMeta(BaseModel):
    """
    IndexMeta
    """

    database: IndexMetaDatabase = Field(...)
    status: IndexMetaStatus = Field(...)
    __properties = ["database", "status"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndexMeta:
        """Create an instance of IndexMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of database
        if self.database:
            _dict["database"] = self.database.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndexMeta:
        """Create an instance of IndexMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IndexMeta.parse_obj(obj)

        _obj = IndexMeta.parse_obj(
            {
                "database": IndexMetaDatabase.from_dict(obj.get("database"))
                if obj.get("database") is not None
                else None,
                "status": IndexMetaStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            }
        )
        return _obj
