# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from pinecone.core.client.models.create_request_index_config import CreateRequestIndexConfig


class CreateRequest(BaseModel):
    """
    CreateRequest
    """

    name: StrictStr = Field(
        ..., description="The name of the index to be created. The maximum length is 45 characters."
    )
    dimension: StrictInt = Field(..., description="The dimensions of the vectors to be inserted in the index")
    region: StrictStr = Field(..., description="The region where you would like your index to be created")
    cloud: StrictStr = Field(..., description="The public cloud where you would like your index hosted")
    capacity_mode: StrictStr = Field(..., description="The capacity mode for the index")
    index_type: Optional[StrictStr] = Field(
        "approximated", description="The type of vector index. Pinecone supports 'approximated'."
    )
    metric: Optional[StrictStr] = Field(
        "cosine",
        description="The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'.",
    )
    pods: Optional[StrictInt] = Field(1, description="The number of pods for the index to use,including replicas.")
    replicas: Optional[StrictInt] = Field(
        1,
        description="The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.",
    )
    shards: Optional[StrictInt] = Field(1, description="The number of shards to be used in the index.")
    pod_type: Optional[StrictStr] = Field(
        "p1.x1",
        description="The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.",
    )
    index_config: Optional[CreateRequestIndexConfig] = None
    metadata_config: Optional[Dict[str, Any]] = Field(
        None,
        description='Configuration for the behavior of Pinecone\'s internal metadata index. By default, all metadata is indexed; when `metadata_config` is present, only specified metadata fields are indexed. To specify metadata fields to index, provide a JSON object of the following form:    ```   {"indexed": ["example_metadata_field"]}   ``` ',
    )
    source_collection: Optional[StrictStr] = Field(
        None, description="The name of the collection to create an index from"
    )
    __properties = [
        "name",
        "dimension",
        "region",
        "cloud",
        "capacity_mode",
        "index_type",
        "metric",
        "pods",
        "replicas",
        "shards",
        "pod_type",
        "index_config",
        "metadata_config",
        "source_collection",
    ]

    @validator("cloud")
    def cloud_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("gcp", "aws", "azure"):
            raise ValueError("must be one of enum values ('gcp', 'aws', 'azure')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateRequest:
        """Create an instance of CreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of index_config
        if self.index_config:
            _dict["index_config"] = self.index_config.to_dict()
        # set to None if metadata_config (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata_config is None and "metadata_config" in self.__fields_set__:
            _dict["metadata_config"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRequest:
        """Create an instance of CreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateRequest.parse_obj(obj)

        _obj = CreateRequest.parse_obj(
            {
                "name": obj.get("name"),
                "dimension": obj.get("dimension"),
                "region": obj.get("region"),
                "cloud": obj.get("cloud"),
                "capacity_mode": obj.get("capacity_mode"),
                "index_type": obj.get("index_type") if obj.get("index_type") is not None else "approximated",
                "metric": obj.get("metric") if obj.get("metric") is not None else "cosine",
                "pods": obj.get("pods") if obj.get("pods") is not None else 1,
                "replicas": obj.get("replicas") if obj.get("replicas") is not None else 1,
                "shards": obj.get("shards") if obj.get("shards") is not None else 1,
                "pod_type": obj.get("pod_type") if obj.get("pod_type") is not None else "p1.x1",
                "index_config": CreateRequestIndexConfig.from_dict(obj.get("index_config"))
                if obj.get("index_config") is not None
                else None,
                "metadata_config": obj.get("metadata_config"),
                "source_collection": obj.get("source_collection"),
            }
        )
        return _obj
