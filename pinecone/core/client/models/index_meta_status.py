# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator


class IndexMetaStatus(BaseModel):
    """
    IndexMetaStatus
    """

    ready: StrictBool = Field(...)
    state: StrictStr = Field(...)
    host: StrictStr = Field(...)
    port: StrictInt = Field(...)
    __properties = ["ready", "state", "host", "port"]

    @validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "Initializing",
            "InitializationFailed",
            "ScalingUp",
            "ScalingDown",
            "ScalingUpPodSize",
            "ScalingDownPodSize",
            "Terminating",
            "Ready",
        ):
            raise ValueError(
                "must be one of enum values ('Initializing', 'InitializationFailed', 'ScalingUp', 'ScalingDown', 'ScalingUpPodSize', 'ScalingDownPodSize', 'Terminating', 'Ready')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndexMetaStatus:
        """Create an instance of IndexMetaStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndexMetaStatus:
        """Create an instance of IndexMetaStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IndexMetaStatus.parse_obj(obj)

        _obj = IndexMetaStatus.parse_obj(
            {"ready": obj.get("ready"), "state": obj.get("state"), "host": obj.get("host"), "port": obj.get("port")}
        )
        return _obj
