# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conint, conlist, constr
from pinecone.core.client.models.query_vector import QueryVector
from pinecone.core.client.models.sparse_values import SparseValues


class QueryRequest(BaseModel):
    """
    The request for the `Query` operation.  # noqa: E501
    """

    namespace: Optional[StrictStr] = Field(None, description="The namespace to query.")
    top_k: conint(strict=True, le=10000, ge=1) = Field(
        ..., alias="topK", description="The number of results to return for each query."
    )
    filter: Optional[Dict[str, Any]] = Field(
        None,
        description="The filter to apply. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/.",
    )
    include_values: Optional[StrictBool] = Field(
        False, alias="includeValues", description="Indicates whether vector values are included in the response."
    )
    include_metadata: Optional[StrictBool] = Field(
        False,
        alias="includeMetadata",
        description="Indicates whether metadata is included in the response as well as the ids.",
    )
    queries: Optional[conlist(QueryVector)] = Field(
        None,
        description="DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.",
    )
    vector: Optional[conlist(Union[StrictFloat, StrictInt])] = Field(
        None,
        description="The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.",
    )
    sparse_vector: Optional[SparseValues] = Field(None, alias="sparseVector")
    id: Optional[constr(strict=True, max_length=512)] = Field(
        None,
        description="The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.",
    )
    __properties = [
        "namespace",
        "topK",
        "filter",
        "includeValues",
        "includeMetadata",
        "queries",
        "vector",
        "sparseVector",
        "id",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryRequest:
        """Create an instance of QueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in queries (list)
        _items = []
        if self.queries:
            for _item in self.queries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["queries"] = _items
        # override the default output from pydantic by calling `to_dict()` of sparse_vector
        if self.sparse_vector:
            _dict["sparseVector"] = self.sparse_vector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryRequest:
        """Create an instance of QueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryRequest.parse_obj(obj)

        _obj = QueryRequest.parse_obj(
            {
                "namespace": obj.get("namespace"),
                "top_k": obj.get("topK"),
                "filter": obj.get("filter"),
                "include_values": obj.get("includeValues") if obj.get("includeValues") is not None else False,
                "include_metadata": obj.get("includeMetadata") if obj.get("includeMetadata") is not None else False,
                "queries": [QueryVector.from_dict(_item) for _item in obj.get("queries")]
                if obj.get("queries") is not None
                else None,
                "vector": obj.get("vector"),
                "sparse_vector": SparseValues.from_dict(obj.get("sparseVector"))
                if obj.get("sparseVector") is not None
                else None,
                "id": obj.get("id"),
            }
        )
        return _obj
