# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from pinecone.core.client.models.vector import Vector


class FetchResponse(BaseModel):
    """
    The response for the `Fetch` operation.  # noqa: E501
    """

    vectors: Optional[Dict[str, Vector]] = None
    namespace: Optional[StrictStr] = Field(None, description="The namespace of the vectors.")
    __properties = ["vectors", "namespace"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FetchResponse:
        """Create an instance of FetchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in vectors (dict)
        _field_dict = {}
        if self.vectors:
            for _key in self.vectors:
                if self.vectors[_key]:
                    _field_dict[_key] = self.vectors[_key].to_dict()
            _dict["vectors"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FetchResponse:
        """Create an instance of FetchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FetchResponse.parse_obj(obj)

        _obj = FetchResponse.parse_obj(
            {
                "vectors": dict((_k, Vector.from_dict(_v)) for _k, _v in obj.get("vectors").items())
                if obj.get("vectors") is not None
                else None,
                "namespace": obj.get("namespace"),
            }
        )
        return _obj
