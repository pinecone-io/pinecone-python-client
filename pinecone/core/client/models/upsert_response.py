# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt


class UpsertResponse(BaseModel):
    """
    The response for the `Upsert` operation.  # noqa: E501
    """

    upserted_count: Optional[StrictInt] = Field(
        None, alias="upsertedCount", description="The number of vectors upserted."
    )
    __properties = ["upsertedCount"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpsertResponse:
        """Create an instance of UpsertResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpsertResponse:
        """Create an instance of UpsertResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpsertResponse.parse_obj(obj)

        _obj = UpsertResponse.parse_obj({"upserted_count": obj.get("upsertedCount")})
        return _obj
