# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist
from pinecone.core.client.models.sparse_values import SparseValues


class QueryVector(BaseModel):
    """
    A single query vector within a `QueryRequest`.  # noqa: E501
    """

    values: conlist(Union[StrictFloat, StrictInt]) = Field(
        ...,
        description="The query vector values. This should be the same length as the dimension of the index being queried.",
    )
    sparse_values: Optional[SparseValues] = Field(None, alias="sparseValues")
    top_k: Optional[conint(strict=True, le=10000, ge=1)] = Field(
        None, alias="topK", description="An override for the number of results to return for this query vector."
    )
    namespace: Optional[StrictStr] = Field(None, description="An override the namespace to search.")
    filter: Optional[Dict[str, Any]] = Field(
        None, description="An override for the metadata filter to apply. This replaces the request-level filter."
    )
    __properties = ["values", "sparseValues", "topK", "namespace", "filter"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryVector:
        """Create an instance of QueryVector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sparse_values
        if self.sparse_values:
            _dict["sparseValues"] = self.sparse_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryVector:
        """Create an instance of QueryVector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryVector.parse_obj(obj)

        _obj = QueryVector.parse_obj(
            {
                "values": obj.get("values"),
                "sparse_values": SparseValues.from_dict(obj.get("sparseValues"))
                if obj.get("sparseValues") is not None
                else None,
                "top_k": obj.get("topK"),
                "namespace": obj.get("namespace"),
                "filter": obj.get("filter"),
            }
        )
        return _obj
