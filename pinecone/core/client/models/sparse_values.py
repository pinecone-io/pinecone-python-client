# coding: utf-8

"""
    Pinecone API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Contact: support@pinecone.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist


class SparseValues(BaseModel):
    """
    Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be with the same length.  # noqa: E501
    """

    indices: conlist(StrictInt) = Field(..., description="The indices of the sparse data.")
    values: conlist(Union[StrictFloat, StrictInt]) = Field(
        ...,
        description="The corresponding values of the sparse data, which must be with the same length as the indices.",
    )
    __properties = ["indices", "values"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SparseValues:
        """Create an instance of SparseValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SparseValues:
        """Create an instance of SparseValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SparseValues.parse_obj(obj)

        _obj = SparseValues.parse_obj({"indices": obj.get("indices"), "values": obj.get("values")})
        return _obj
