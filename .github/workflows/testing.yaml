name: Testing

on:
  workflow_call: {}

jobs:
  units-no-grpc:
    name: Unit tests (REST)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry

      - name: Run unit tests
        run: poetry run pytest --cov=pinecone --timeout=120 tests/unit
      
      - name: mypy check
        run: |
          # Still lots of errors when running on the whole package (especially
          # in the generated core module), but we can check these subpackages
          # so we don't add new regressions.
          poetry run mypy pinecone --exclude pinecone/core --exclude pinecone/grpc

  integration-rest:
    name: Integration tests (REST)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.11]
        pineconeEnv: ['prod', 'staging']
      max-parallel: 1
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry

      - name: Run integration tests (REST, prod)
        if: matrix.pineconeEnv == 'prod'
        run: poetry run pytest tests/integration -s -v
        env:
          PINECONE_CONTROLLER_HOST: 'https://api.pinecone.io'
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          TEST_CAPACITY_MODE_1: ${{ secrets.TEST_CAPACITY_MODE_1 }}
          TEST_CAPACITY_MODE_2: ${{ secrets.TEST_CAPACITY_MODE_2 }}
          GITHUB_BUILD_NUMBER: "${{ github.run_number }}-p-${{ matrix.python-version}}"

      - name: Run integration tests (REST, staging)
        if: matrix.pineconeEnv == 'staging'
        run: poetry run pytest tests/integration -s -v
        env:
          PINECONE_CONTROLLER_HOST: 'https://api-staging.pinecone.io'
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY_STAGING }}
          TEST_CAPACITY_MODE_1: ${{ secrets.TEST_CAPACITY_MODE_1 }}
          TEST_CAPACITY_MODE_2: ${{ secrets.TEST_CAPACITY_MODE_2 }}
          GITHUB_BUILD_NUMBER: "${{ github.run_number }}-s-${{ matrix.python-version}}"

  units-grpc:
    name: Unit tests (GRPC)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
        with:
          include_grpc: true

      - name: Run unit tests (GRPC)
        run: poetry run pytest --cov=pinecone --timeout=120 tests/unit_grpc

      - name: mypy check
        run: |
          # Still lots of errors when running on the whole package (especially
          # in the generated core module), but we can check these subpackages
          # so we don't add new regressions.
          poetry run mypy pinecone --exclude pinecone/core


  package:
    name: Check packaging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry

      - name: Package
        run: poetry build
