name: PyPI Prerelease

on:
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build (branch name or SHA)'
        required: true
        type: string
        default: 'main' 
      releaseLevel:
        description: 'Release level'
        required: true
        type: string
        default: 'patch'
      isPrerelease:
        description: 'Whether this is a prerelease'
        required: true
        type: boolean
        default: true
      prereleaseSuffix:
        description: 'Suffix to add onto the new version number in order to mark it as a prerelease. Value ignored when shipping a release that is not a prerelease.'
        required: true
        type: string
        default: 'rc1'
      PYPI_USERNAME:
        description: 'PyPI username'
        required: true
        type: string
      PYPI_PASSWORD:
        description: 'PyPI password'
        required: true
        type: string
      TWINE_REPOSITORY:
        description: 'PyPI repository'
        required: true
        type: string
        default: 'https://upload.pypi.org/legacy/'

env:
  PYPI_USERNAME: ${{ github.event.inputs.PYPI_USERNAME }}
  PYPI_PASSWORD: ${{ github.event.inputs.PYPI_PASSWORD }}
  TWINE_REPOSITORY: ${{ github.event.inputs.TWINE_REPOSITORY }}

jobs:
  pypi:
    timeout-minutes: 30
    name: pypi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need full history and tags to compute list of commits in release
          ref: ${{ github.event.inputs.ref }}

      - name: Verify prereleaseSuffix not empty if isPrerelease is true
        if: ${{ github.event.inputs.isPrerelease == 'true' }}
        run: |
          if [ -z "${{ github.event.inputs.prereleaseSuffix }}" ]; then
            echo "prereleaseSuffix cannot be empty if isPrerelease is true"
            exit 1
          fi

      - name: Bump version
        id: bump
        uses: './.github/actions/bump-version'
        with:
          versionFile: pinecone/__version__ 
          bumpType: ${{ github.event.inputs.releaseLevel }}
          prereleaseSuffix: ${{ github.event.inputs.prereleaseSuffix }}
      
      - name: Verify unique release number
        run: |
          if git tag -l | grep -q ${{ steps.bump.outputs.VERSION_TAG }}; then
            echo "Tag ${{ steps.bump.outputs.VERSION_TAG }} already exists, aborting"
            exit 1
          fi

      - name: Set up Git
        run: |
          git config --global user.name "Pinecone CI"
          git config --global user.email "clients@pinecone.io"
  
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
  
      - name: Build Python client
        run: make package

      - name: Upload Python client to PyPI
        id: pypi_upload
        run: make upload

      - name: Discard changes, if prerelease
        if: ${{ github.event.inputs.isPrerelease == 'true' }}
        run: |
          git checkout pinecone/__version__

      - name: Tag version
        run: |
          newVersionTag="${{ steps.bump.outputs.VERSION_TAG }}"
          git tag -a $newVersionTag -m "Release $newVersionTag"
    
      - name: Push tags (prerelease)
        if: ${{ github.event.inputs.isPrerelease == 'true' }}
        # In the case of the prerelease, we discarded the version changes
        # instead of committing them. So we need a slightly different
        # command to push the git tag we created.
        run: git push --tags
      
      - name: Push tags (production release)
        if: ${{ github.event.inputs.isPrerelease == 'false' }}
        run: git push --follow-tags