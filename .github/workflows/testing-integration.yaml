name: "Integration Tests"
'on':
  workflow_call: {}

jobs:
  # setup-index:
  #   name: Setup proxyconfig test index
  #   runs-on: ubuntu-latest
  #   outputs:
  #     index_name: ${{ steps.create-index.outputs.index_name }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create index
  #       id: create-index
  #       uses: ./.github/actions/create-index
  #       with:
  #         PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
  #         NAME_PREFIX: 'proxyconfig-'
  #         REGION: 'us-west-2'
  #         CLOUD: 'aws'
  #         DIMENSION: 1536
  #         METRIC: 'cosine'

  # proxy-config:
  #   name: Proxy config tests
  #   needs: [setup-index]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.9
  #     - name: Setup Poetry
  #       uses: ./.github/actions/setup-poetry
  #     - name: 'Run integration tests (proxy config)'
  #       run: |
  #         poetry run pytest tests/integration/proxy_config -s -v
  #       env:
  #         PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
  #         PINECONE_INDEX_NAME: ${{ needs.setup-index.outputs.index_name }}
  #     - name: Upload logs
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: proxy_config_test_logs
  #         path: tests/integration/proxy_config/logs
  #     - name: Cleanup index
  #       if: always()
  #       uses: ./.github/actions/delete-index
  #       with:
  #         PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
  #         INDEX_NAME: ${{ needs.setup-index.outputs.index_name }}

  data-plane-serverless:
    name: Data plane serverless integration tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.8, 3.12]
        use_grpc: [true, false]
        metric: 
          - cosine
          # - euclidean
          # - dotproduct
        spec:
          - '{ "serverless": { "region": "us-west-2", "cloud": "aws" }}'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-data-plane
        with:
          python_version: '${{ matrix.python_version }}'
          use_grpc: '${{ matrix.use_grpc }}'
          metric: '${{ matrix.metric }}'
          spec: '${{ matrix.spec }}'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          freshness_timeout_seconds: 600
#   data-plane-pod:
#     name: Data plane pod integration tests
#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 1
#       matrix:
#         use_grpc: [true, false]
#         metric: [cosine, dotproduct]
#         spec:
#           - '{ "pod": { "environment": "us-east1-gcp", "pod_type": "p1" }}'
#     steps:
#       - uses: actions/checkout@v4
#       - uses: ./.github/actions/test-data-plane
#         with:
#           use_grpc: '${{ matrix.use_grpc }}'
#           metric: '${{ matrix.metric }}'
#           spec: '${{ matrix.spec }}'
#           PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  control-rest-pod:
    name: control plane pod/collection tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pineconeEnv:
          - prod
        testConfig:
          - python-version: 3.8
            pod: { environment: 'us-east1-gcp'}
          - python-version: 3.12
            pod: { environment: 'us-east4-gcp'}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.testConfig.python-version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.testConfig.python-version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
      - name: 'Run integration tests (REST, prod)'
        if: matrix.pineconeEnv == 'prod'
        run: poetry run pytest tests/integration/control/serverless -s -v
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          PINECONE_ENVIRONMENT: '${{ matrix.testConfig.pod.environment }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-s-${{ matrix.testConfig.python-version}}'
          DIMENSION: 1536
          METRIC: 'cosine'
      - name: 'Run integration tests (REST, staging)'
        if: matrix.pineconeEnv == 'staging'
        run: poetry run pytest tests/integration/control/serverless -s -v
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_CONTROLLER_HOST: 'https://api-staging.pinecone.io'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY_STAGING }}'
          PINECONE_ENVIRONMENT: '${{ matrix.testConfig.pod.environment }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-p-${{ matrix.testConfig.python-version}}'
          DIMENSION: 1536
          METRIC: 'cosine'

  control-rest-serverless:
    name: control plane serverless
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pineconeEnv:
          - prod
        testConfig:
          - python-version: 3.8 # Do one test run with 3.8 for sanity check
            pod: { environment: 'us-east1-gcp'}
            serverless: { cloud: 'aws', region: 'us-west-2'}
          - python-version: 3.12
            pod: { environment: 'us-east1-gcp'}
            serverless: { cloud: 'aws', region: 'us-west-2'}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.testConfig.python-version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.testConfig.python-version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
      - name: 'Run integration tests (REST, prod)'
        if: matrix.pineconeEnv == 'prod'
        run: poetry run pytest tests/integration/control/serverless -s -vv
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-p-${{ matrix.testConfig.python-version}}'
          SERVERLESS_CLOUD: '${{ matrix.testConfig.serverless.cloud }}'
          SERVERLESS_REGION: '${{ matrix.testConfig.serverless.region }}'
      - name: 'Run integration tests (REST, staging)'
        if: matrix.pineconeEnv == 'staging'
        run: poetry run pytest tests/integration/control/serverless -s -vv
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_CONTROLLER_HOST: 'https://api-staging.pinecone.io'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY_STAGING }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-s-${{ matrix.testConfig.python-version}}'
          SERVERLESS_CLOUD: '${{ matrix.testConfig.serverless.cloud }}'
          SERVERLESS_REGION: '${{ matrix.testConfig.serverless.region }}'
