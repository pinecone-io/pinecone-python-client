name: "Integration Tests"
'on':
  workflow_call: {}

env:
  DD_CIVISIBILITY_AGENTLESS_ENABLED: true
  DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DD_SITE: datadoghq.com
  DD_ENV: ci
  DD_SERVICE: pinecone-python-client

jobs:
  plugin-inference:
    name: Test inference plugin
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: [3.8, 3.12]
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.python_version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python_version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
        with:
          include_grpc: 'true'
      - name: 'Run integration tests'
        run: poetry run pytest tests/integration/inference -s -vv --ddtrace
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  data-plane-setup:
    name: Create index
    runs-on: ubuntu-latest
    outputs:
      index_name: ${{ steps.setup-index.outputs.index_name }}
      index_host: ${{ steps.setup-index.outputs.index_host }}
      index_dimension: ${{ steps.setup-index.outputs.index_dimension }}
      index_metric: ${{ steps.setup-index.outputs.index_metric }}
    steps:
      - uses: actions/checkout@v4
      - name: Create index
        id: setup-index
        uses: ./.github/actions/create-index
        timeout-minutes: 5
        with:
          dimension: 100
          metric: 'cosine'
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}


  test-data-plane-asyncio:
    name: Data plane asyncio integration tests
    runs-on: ubuntu-latest
    needs:
      - data-plane-setup
    outputs:
      index_name: ${{ needs.data-plane-setup.outputs.index_name }}
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.8, 3.12]
        use_grpc: [true]
        spec:
          - '{ "asyncio": { "environment": "us-east1-gcp" }}'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-data-plane-asyncio
        with:
          python_version: '${{ matrix.python_version }}'
          use_grpc: '${{ matrix.use_grpc }}'
          metric: '${{ needs.data-plane-setup.outputs.index_metric }}'
          dimension: '${{ needs.data-plane-setup.outputs.index_dimension }}'
          host: '${{ needs.data-plane-setup.outputs.index_host }}'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          freshness_timeout_seconds: 600

  data-plane-asyncio-cleanup:
    name: Deps cleanup
    runs-on: ubuntu-latest
    needs:
      - test-data-plane-asyncio
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/delete-index
        with:
          index_name: '${{ needs.test-data-plane-asyncio.outputs.index_name }}'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  data-plane-serverless:
    name: Data plane serverless integration tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.8, 3.12]
        use_grpc: [true, false]
        metric:
          - cosine
          # - euclidean
          # - dotproduct
        spec:
          - '{ "serverless": { "region": "us-west-2", "cloud": "aws" }}'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-data-plane
        with:
          DATADOG_API_KEY: '${{ secrets.DATADOG_API_KEY }}'
          python_version: '${{ matrix.python_version }}'
          use_grpc: '${{ matrix.use_grpc }}'
          metric: '${{ matrix.metric }}'
          spec: '${{ matrix.spec }}'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          freshness_timeout_seconds: 600
          skip_weird_id_tests: 'true'
#   data-plane-pod:
#     name: Data plane pod integration tests
#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 1
#       matrix:
#         use_grpc: [true, false]
#         metric: [cosine, dotproduct]
#         spec:
#           - '{ "pod": { "environment": "us-east1-gcp", "pod_type": "p1" }}'
#     steps:
#       - uses: actions/checkout@v4
#       - uses: ./.github/actions/test-data-plane
#         with:
#           use_grpc: '${{ matrix.use_grpc }}'
#           metric: '${{ matrix.metric }}'
#           spec: '${{ matrix.spec }}'
#           PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  control-rest-pod:
    name: control plane pod/collection tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pineconeEnv:
          - prod
        testConfig:
          - python-version: 3.8
            pod: { environment: 'us-east1-gcp'}
          - python-version: 3.12
            pod: { environment: 'us-east4-gcp'}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.testConfig.python-version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.testConfig.python-version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
      - name: 'Run integration tests (REST, prod)'
        if: matrix.pineconeEnv == 'prod'
        run: poetry run pytest tests/integration/control/pod -s -v --ddtrace
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          PINECONE_ENVIRONMENT: '${{ matrix.testConfig.pod.environment }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-s-${{ matrix.testConfig.python-version}}'
          DIMENSION: 10
          METRIC: 'cosine'
      - name: 'Run integration tests (REST, staging)'
        if: matrix.pineconeEnv == 'staging'
        run: poetry run pytest tests/integration/control/pod -s -v --ddtrace
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_CONTROLLER_HOST: 'https://api-staging.pinecone.io'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY_STAGING }}'
          PINECONE_ENVIRONMENT: '${{ matrix.testConfig.pod.environment }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-p-${{ matrix.testConfig.python-version}}'
          DIMENSION: 10
          METRIC: 'cosine'

  control-rest-serverless:
    name: control plane serverless
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pineconeEnv:
          - prod
        testConfig:
          - python-version: 3.8 # Do one test run with 3.8 for sanity check
            pod: { environment: 'us-east1-gcp'}
            serverless: { cloud: 'aws', region: 'us-west-2'}
          - python-version: 3.12
            pod: { environment: 'us-east1-gcp'}
            serverless: { cloud: 'aws', region: 'us-west-2'}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.testConfig.python-version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.testConfig.python-version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
      - name: 'Run integration tests (REST, prod)'
        if: matrix.pineconeEnv == 'prod'
        run: poetry run pytest tests/integration/control/serverless -s -vv --ddtrace
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-p-${{ matrix.testConfig.python-version}}'
          SERVERLESS_CLOUD: '${{ matrix.testConfig.serverless.cloud }}'
          SERVERLESS_REGION: '${{ matrix.testConfig.serverless.region }}'
      - name: 'Run integration tests (REST, staging)'
        if: matrix.pineconeEnv == 'staging'
        run: poetry run pytest tests/integration/control/serverless -s -vv --ddtrace
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_CONTROLLER_HOST: 'https://api-staging.pinecone.io'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY_STAGING }}'
          GITHUB_BUILD_NUMBER: '${{ github.run_number }}-s-${{ matrix.testConfig.python-version}}'
          SERVERLESS_CLOUD: '${{ matrix.testConfig.serverless.cloud }}'
          SERVERLESS_REGION: '${{ matrix.testConfig.serverless.region }}'
